#!/usr/bin/python

import os, json
from locate_file import locate_file

###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
first_output_for_tsv = '/firstOutputTsv'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

################### Set path to input ##############################

inputImageOrArchive_path = os.path.join(flywheel_base, 'input/fmriprepOutputArchive/')
unzipped_file_path = os.path.join('/opt', 'unzipped_files')

## Get the input archive ##
inputImageOrArchive = os.path.join(inputImageOrArchive_path, os.listdir(inputImageOrArchive_path)[0])
archive_save_name = os.path.split(inputImageOrArchive)[1]

# Input is archive
image_extention = 'space-T1w_desc-preproc_bold.nii.gz'
if os.path.splitext(inputImageOrArchive)[1] == '.zip':
    unzipped_file_path = os.path.join('/opt', 'unzipped_files')
    os.system('mkdir %s' % unzipped_file_path)
    os.system('unzip -q %s -d %s' % (inputImageOrArchive, unzipped_file_path))
else:
    raise RuntimeError('Image input is not a zip.')

inputImages = locate_file(image_extention, unzipped_file_path)

################## Run Algorithm ################################

for image in inputImages:
        noise_ics = image.replace('space-T1w_desc-preproc_bold.nii.gz', 'AROMAnoiseICs.csv')
        melodix_mix = image.replace('space-T1w_desc-preproc_bold.nii.gz', 'desc-MELODIC_mixing.tsv')
        confound_file = image.replace('space-T1w_desc-preproc_bold.nii.gz', 'desc-confounds_regressors.tsv')
        output_file = os.path.join(first_output_dir, os.path.split(image)[1].replace('space-T1w_desc-preproc_bold.nii.gz', 'space-T1w_desc-preproc_bold_denoised.nii.gz'))
        os.system('cp %s %s' % (confound_file, first_output_for_tsv))   
        
        # Run ciftify and map to cifti FSLR
        denoiser_command = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/fsl_regfilt -i %s -f %s -d %s -o %s -v' % (image, noise_ics, melodix_mix, output_file)     
        os.system(denoiser_command)
        
################## Zip the surfaces and output ##################################
os.system('cd %s; zip -r -q %s *' % (first_output_dir, os.path.join(final_output_dir, 'denoised_' + archive_save_name)))
os.system('cd %s; zip -r -q %s *' % (first_output_for_tsv, os.path.join(final_output_dir, 'confounds_' + archive_save_name)))

